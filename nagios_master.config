; I've noticed there no existing public implementations of Nagios' check_cluster command, aside from a small selection of posts scattered across multiple websites
; I hope this will at least shed some light on how to set it up
; Suppose an academic VNC server, where workstations are accessed via port forwarding, like so:
    ; Host          -   5900 (normally this is on a seperate VLAN)
    ; Workstation 1 -   5901
    ; Workstation 2 -   5902
    ; ...
    ; Workstation n -   5900+n

; Define a basic host to associate reporting with
; hosts.config:
define hostgroup {
    hostgroup_name              VDIHosts
    alias                       VDI Hosts
}
define host {
    use                          linux-server ; Note: the server does not have to run Linux
    host_name                    VDI
    hostgroups                   VDIHosts
    alias                        umn.edu VNC Host
    address                      127.0.0.1
}


; With the host defined, set up the commands to check the endpoints
; commands.config:
define command {
    command_name check_vdi_host
    command_line $USER1$/check_tcp -H $HOSTADDRESS$ -p 5900 -w 5 -c 8 -e "RFB"
}
; This is pretty basic: check to see if the host at the registered address responds with a packet containing "RFB" (after the handshake), i.e. a VNC packet
; For the workstations:
define command {
    command_name check_vdi_workstation_1
    command_line $USER1$/check_tcp -H $HOSTADDRESS$ -p 5901 -w 5 -c 8 -e "RFB"
}
; This follows. If you use numbers, instead of letters, it is trivial to create text templates in Python. 

; BREAK - template.py:
;   check_workstation = r"""
;   define command {{
;       command_name check_vdi_workstation_{number}
;       command_line $USER1$/check_tcp -H $HOSTADDRESS$ -p {numberPlusOffset} -w 5 -c 8 -e "RFB"
;   }}
;   """
;   for i in range(1, 100):
;       print(str(check_workstation.format(number=i, numberPlusOffset=5900+i)))

; RESUME - commands.config:
define command {
    command_name check_vdi_workstation_2
    command_line $USER1$/check_tcp -H $HOSTADDRESS$ -p 5902 -w 5 -c 8 -e "RFB"
}
define command {
    command_name check_vdi_workstation_3
    command_line $USER1$/check_tcp -H $HOSTADDRESS$ -p 5903 -w 5 -c 8 -e "RFB"
}
; Now that the check commands are defined, it's time to add services to bridge the hosts and check commands
; services.config:
define service {
    use                     generic-service
    service_description     VDI Host
    name                    cvh
    check_command           check_vdi_host
    max_check_attempts      5
    check_interval          5
    retry_interval          1
    hostgroup_name          VDIHosts
}
define service {
    use                     generic-service
    service_description     Workstation 1
    name                    cvw1
    service_groups          all_workstations
    check_command           check_vdi_workstation_1
    max_check_attempts      5
    check_interval          5
    retry_interval          1
    hostgroup_name          VDIHosts
}
define service {
    use                     generic-service
    service_description     Workstation 2
    name                    cvw2
    service_groups          all_workstations
    check_command           check_vdi_workstation_2
    max_check_attempts      5
    check_interval          5
    retry_interval          1
    hostgroup_name          VDIHosts
}
define service {
    use                     generic-service
    service_description     Workstation 3
    name                    cvw3
    service_groups          all_workstations
    check_command           check_vdi_workstation_3
    max_check_attempts      5
    check_interval          5
    retry_interval          1
    hostgroup_name          VDIHosts
}
define servicegroup {
    servicegroup_name       all_workstations
    alias                   All Workstations
}
; Both the VDI host and its workstations are now associated with the Nagios host entry
; Now, all that is left is to cluster them
; commands.config:
define command {
    command_name    check_service_cluster
    command_line    $USER1$/check_cluster --service -l $ARG1$ -w $ARG2$ -c $ARG3$ -d $ARG4$
}
; services.config:
define service {
    use                     generic-service
    service_description     VDI Workstation cluster
    name                    vdic
    check_command           check_service_cluster!"VDI Workstations"!0!1!$SERVICESTATEID::Workstation 1$,$SERVICESTATEID::Workstation 2$,$SERVICESTATEID::Workstation 3$
    max_check_attempts      5
    check_interval          5
    retry_interval          1
    hostgroup_name          VDIHosts
}
; Explanation:
;   Command     -   check_service_cluster
;   Argument 1  -   Name of the cluster                                             -   "VDI Workstations"
;   Argument 2  -   Amount of down services needed to trigger a warning status      -   0
;   Argument 3  -   Amount of down services needed to trigger a critical status     -   1
;   Argument 4  -   An ARRAY of numbers representing the statuses of each service   -   [...]
                    ; In order to dynamically pass things into the array, use a macro expansion:
                    ; $SERVICESTATEID::Workstation 1$
                    ; $              - Begins a macro
                    ; SERVICESTATEID - Tells Nagios to look up a cached status of the service
                    ; ::             - Tells Nagios to use look at the implicit host for the service (otherwise, this would be the short host name)
                    ; Workstation 1  - The LONG NAME of the service attached to the host
                    ; $              - Ends the macro
                    ; If :: was not used, $SERVICESTATEID:VDI:Workstation 1$ would be equivalent
                    ; This can be very confusing to configure, as an invalid host or service name will simply return OK
; This is another case where Python string templates will come in handy - especially if a cluster will have several dozens of members

; Since this sets up everything through group inheritence, it is trivial to add other VNC hosts, assuming they are congruent
; hosts.config:
define host {
    use                          linux-server
    host_name                    VDI_Internal
    hostgroups                   VDIHosts
    alias                        umn.edu Super Secret Devops VDI
    address                      172.16.0.1
}
define host {
    use                          linux-server
    host_name                    VDI_Ford
    hostgroups                   VDIHosts
    alias                        umn.edu Not So Secret Ford Motors VDI
    address                      19.0.0.1
}
; etc.